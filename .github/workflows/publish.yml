name: Publish to PyPI

on:
  push:
    branches: [ main ]
    paths:
      - 'pyproject.toml'
      - 'subtitle_generator.py'
      - 'main.py'
  release:
    types: [published]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Get version from pyproject.toml
      id: get_version
      run: |
        VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
    
    - name: Check if version exists on PyPI
      id: check_version
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        if pip index versions fcpxml-subtitle-generator 2>/dev/null | grep -q "$VERSION"; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Version $VERSION already exists on PyPI"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Version $VERSION does not exist on PyPI"
        fi
    
    - name: Build package
      if: steps.check_version.outputs.exists == 'false'
      run: python -m build
    
    - name: Publish to PyPI
      if: steps.check_version.outputs.exists == 'false'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
        echo "✅ Successfully published version ${{ steps.get_version.outputs.version }} to PyPI"
    
    - name: Skip publishing
      if: steps.check_version.outputs.exists == 'true'
      run: |
        echo "⏭️ Skipping publish - version ${{ steps.get_version.outputs.version }} already exists on PyPI" 